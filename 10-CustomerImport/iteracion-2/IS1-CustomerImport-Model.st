Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'test data' stamp: 'alejandroventura 6/25/2018 08:13'!largerAddressCustomerTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAs,3141592A,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'alejandroventura 6/25/2018 08:07'!largerLineCustomerTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444,3141592A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'martinventura 6/21/2018 20:54'!addressWithNoCustomerTestData	^ ReadStream on:'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/1/2016 15:17'!validTestData	^ ReadStream on:'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'alejandroventura 6/25/2018 08:37'!invalidTypeTestData	^ ReadStream on:'G,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'alejandroventura 6/25/2018 08:36'!emptyTestData	^ ReadStream on:''! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:13'!assertImportedCustomersSizeIsCorrect		self assert: (session selectAllOfType: Customer) size equals: 2.	! !!CustomerImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/25/2018 14:12'!test03CanNotImportWithIncorrectCustomerLineLength		self 		should: [ (CustomerImporter from: self largerLineCustomerTestData into: session) value. ]		raise: Error 		withExceptionDo: [ :anError |			self assert: anError messageText = CustomerImporter canNotImportWithIncorrectFieldNumberErrorMessage]! !!CustomerImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/25/2018 14:12'!test04CanNotImportWithIncorrectAddressLineLength		self 		should: [ (CustomerImporter from: self largerAddressCustomerTestData into: session) value. ]		raise: Error 		withExceptionDo: [ :anError |			self assert: anError messageText = CustomerImporter canNotImportWithIncorrectFieldNumberErrorMessage]! !!CustomerImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/25/2018 13:16'!test05CanNotImportInvalidTypes	self 		should: [ (CustomerImporter from: self invalidTypeTestData into: session) value. ]		raise: Error 		withExceptionDo: [ :anError |			self assert: anError messageText = CustomerImporter canNotImportInvalidTypesErrorMessage]! !!CustomerImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/25/2018 13:16'!test02CanNotImportAddressInWaitingCustomerState	self 		should: [ (CustomerImporter from: self addressWithNoCustomerTestData into: session) value. ]		raise: Error 		withExceptionDo: [ :anError |			self assert: anError messageText = CustomerImporter canNotImportAddressInWaitingCustomerStateErrorMessage]! !!CustomerImportTest methodsFor: 'testing' stamp: 'martinventura 6/21/2018 20:54'!test01ImportCustomers	(CustomerImporter from: self validTestData into: session) value.		self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/25/2018 13:16'!test06CanNotImportEmptyDataSet	self 		should: [ (CustomerImporter from: self emptyTestData into: session) value. ]		raise: Error 		withExceptionDo: [ :anError |			self assert: anError messageText = CustomerImporter canNotImportEmptyDataErrorMessage]! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 15:17'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|customers |		customers := session 		select: [ :aCustomer | aCustomer identificationType = anIdentifycationType and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			self assert: customers size equals: 1.		^customers anyOne.! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!setUp	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping).	session open.	session beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!tearDown	session commit.	session close! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !Object subclass: #CustomerImporter	instanceVariableNames: 'newCustomer record session inputStream state'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:23'!saveRecord: line	self readRecordFrom: line.	self assertIsAValidRecordType.	(self isCustomerRecord) ifTrue: [ state saveCustomerRecord ].	(self isAddressRecord)  ifTrue: [ state saveAddressRecord ].	! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:53'!value	| line |		self assertImportDataIsNotEmpty.	[ line := inputStream nextLine.	line notNil ] whileTrue:		[ self saveRecord: line ]! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:11'!saveCustomerRecord	self assertCustomerRecordHasCorrectNumberOfFields.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	session persist: newCustomer.	state := HasCustomerToWorkOnState for: self.! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:09'!saveAddressRecord	| newAddress |	self assertAddressRecordHasCorrectNumberOfFields.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:12'!customerLineFieldNumber	^ 5! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:08'!addressLineFieldNumber	^ 6! !!CustomerImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 14:02'!readRecordFrom: line	record := line substrings: {$,}.! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:24'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 13:54'!assertImportDataIsNotEmpty	inputStream isEmpty ifTrue: [self error: self class canNotImportEmptyDataErrorMessage ]! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:08'!assertAddressRecordHasCorrectNumberOfFields		record size = self addressLineFieldNumber ifFalse: [self error: self class canNotImportWithIncorrectFieldNumberErrorMessage].		! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:23'!assertIsAValidRecordType		(self isValidRecord) ifFalse: [ self error: self class canNotImportInvalidTypesErrorMessage ].	! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:25'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:12'!assertCustomerRecordHasCorrectNumberOfFields	record size = self customerLineFieldNumber ifFalse: [self error: self class canNotImportWithIncorrectFieldNumberErrorMessage].! !!CustomerImporter methodsFor: 'asserting' stamp: 'MarceloGuzman 6/25/2018 14:24'!isValidRecord	^ (self isCustomerRecord) or: [ (self isAddressRecord) ]! !!CustomerImporter methodsFor: 'initialization' stamp: 'alejandroventura 6/25/2018 08:04'!initializeFrom: anInputStream into: aSession	inputStream := anInputStream.	session := aSession.	state := WaitingCustomerDataState for: self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'martinventura 6/21/2018 20:22'!from: anInputStream into: aSession	^self new initializeFrom: anInputStream into: aSession.! !!CustomerImporter class methodsFor: 'error messages' stamp: 'alejandroventura 6/25/2018 08:34'!canNotImportEmptyDataErrorMessage	^'Can not import empty data set.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'MarceloGuzman 6/25/2018 14:09'!canNotImportWithIncorrectFieldNumberErrorMessage	^'Can not import with an incorrect number of fields.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'alejandroventura 6/25/2018 08:39'!canNotImportInvalidTypesErrorMessage	^'Can not import with a type field that is not C or A.'! !!CustomerImporter class methodsFor: 'error messages' stamp: 'alejandroventura 6/25/2018 08:15'!canNotImportAddressInWaitingCustomerStateErrorMessage	^'Can not import address in ImportingCustomer state.'! !Object subclass: #CustomerImporterState	instanceVariableNames: 'customerImporter'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporterState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:19'!saveAddressRecord	self subclassResponsibility.! !!CustomerImporterState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:19'!saveCustomerRecord	self subclassResponsibility.! !!CustomerImporterState methodsFor: 'initialization' stamp: 'MarceloGuzman 6/25/2018 13:19'!initializeFor: aCustomerImporter		customerImporter := aCustomerImporter! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporterState class	instanceVariableNames: ''!!CustomerImporterState class methodsFor: 'instance creation' stamp: 'alejandroventura 6/25/2018 07:51'!for: aCustomerImporter 		^self new initializeFor: aCustomerImporter ! !CustomerImporterState subclass: #HasCustomerToWorkOnState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!HasCustomerToWorkOnState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:21'!saveAddressRecord		customerImporter saveAddressRecord.! !!HasCustomerToWorkOnState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:21'!saveCustomerRecord	customerImporter saveCustomerRecord.! !CustomerImporterState subclass: #WaitingCustomerDataState	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!WaitingCustomerDataState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:21'!saveAddressRecord	self error: CustomerImporter canNotImportAddressInWaitingCustomerStateErrorMessage! !!WaitingCustomerDataState methodsFor: 'importing' stamp: 'MarceloGuzman 6/25/2018 13:21'!saveCustomerRecord	customerImporter saveCustomerRecord.! !