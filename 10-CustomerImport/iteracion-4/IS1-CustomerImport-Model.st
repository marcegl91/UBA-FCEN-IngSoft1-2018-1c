Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'importing' stamp: 'mv 7/1/2018 04:25'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/3/2016 09:21'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:21'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:51'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'MarceloGuzman 7/2/2018 13:27'!createSupplierSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelpmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:47'!createCustomerSystem		^TransientCustomerSystem new! !!DevelpmentEnvironment methodsFor: 'system creation' stamp: 'MarceloGuzman 6/28/2018 19:58'!createSupplierSystem		^TransientSupplierSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelpmentEnvironment class	instanceVariableNames: ''!!DevelpmentEnvironment class methodsFor: 'environment selection' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #Importer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Importer methodsFor: 'importing' stamp: 'MarceloGuzman 7/2/2018 15:36'!import	self subclassResponsibility ! !Importer subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/4/2016 09:33'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system add: newCustomer! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:26'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/4/2016 09:27'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:45'!createCustomerSystem		^PersistentCustomerSystem new! !!IntegrationEnvironment methodsFor: 'system creation' stamp: 'MarceloGuzman 6/28/2018 20:00'!createSupplierSystem		^PersistentSupplierSystem new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'environment selection' stamp: 'MarceloGuzman 7/2/2018 17:02'!isCurrent		^true! !Object subclass: #Party	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'identification' stamp: 'MarceloGuzman 7/2/2018 14:06'!identificationNumber	^ self subclassResponsibility ! !!Party methodsFor: 'identification' stamp: 'MarceloGuzman 7/2/2018 14:07'!isIdentifiedAs: anIdType numbered: anIdNumber 	^self subclassResponsibility ! !!Party methodsFor: 'identification' stamp: 'MarceloGuzman 7/2/2018 14:06'!identificationType: anIdentificationType 	^self subclassResponsibility ! !!Party methodsFor: 'identification' stamp: 'MarceloGuzman 7/2/2018 14:06'!identificationNumber: anIdentificationNumber 	^self subclassResponsibility ! !!Party methodsFor: 'identification' stamp: 'MarceloGuzman 7/2/2018 14:06'!identificationType	^ self subclassResponsibility ! !Party subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 11/4/2016 09:42'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !Party subclass: #Supplier	instanceVariableNames: 'id fullName identificationType identificationNumber addresses customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'customers' stamp: 'MarceloGuzman 7/2/2018 16:27'!numberOfCustomers		^customers size! !!Supplier methodsFor: 'customers' stamp: 'MarceloGuzman 7/2/2018 16:28'!customers	^ customers! !!Supplier methodsFor: 'customers' stamp: 'MarceloGuzman 7/2/2018 16:27'!addCustomer: aCustomer	customers add: aCustomer! !!Supplier methodsFor: 'customers' stamp: 'MarceloGuzman 7/2/2018 16:28'!customersIsEmpty		^customers isEmpty! !!Supplier methodsFor: 'customers' stamp: 'MarceloGuzman 7/2/2018 16:29'!customersIdentifiedAs: anIdentificationType withNumber: anIdentificationNumber	^customers select: [ :aClient | aClient isIdentifiedAs: anIdentificationType numbered: anIdentificationNumber ]! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:04'!fullName: aFullName	fullName := aFullName! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:04'!fullName	^fullName! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:40'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:04'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:47'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:04'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'MarceloGuzman 6/28/2018 20:40'!identificationType		^identificationType ! !!Supplier methodsFor: 'accessing' stamp: 'MarceloGuzman 7/2/2018 16:27'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'addresses' stamp: 'MarceloGuzman 6/28/2018 20:16'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses' stamp: 'MarceloGuzman 7/2/2018 16:03'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'addresses' stamp: 'MarceloGuzman 6/28/2018 20:05'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'MarceloGuzman 6/28/2018 20:05'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'MarceloGuzman 6/28/2018 20:05'!numberOfAddresses		^addresses size! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'supplierSystem customerSystem erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'test data' stamp: 'MarceloGuzman 6/28/2018 20:25'!validTestData	^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MarceloGuzman 7/2/2018 16:08'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'tests' stamp: 'MarceloGuzman 7/2/2018 17:00'!testShouldNotImportExistingCustomerRecordsThatDoesntExist	self		should: [ self importSuppliersFrom: self existingCustomerRecordThatDoesntExistTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerDoesntExistErrorDescription. ]! !!SupplierImportTest methodsFor: 'tests' stamp: 'MarceloGuzman 7/2/2018 16:55'!testShouldNotImportNewCustomerRecordsThatAlreadyExists	self		should: [ self importCustomersFrom: self validCustomersTestData.				self importSuppliersFrom: self newCustomerRecordThatAlreadyExistsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerAlreadyRecordedErrorDescription. ]! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:22'!existingCustomerRecordWithMoreThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'EC,D,5456774,etc'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:35'!newCustomerWithoutSupplierTestData		^ ReadStream on: 'NC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:40'!newCustomerRecordStartingWithMoreThanOneNCTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NCN,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:39'!existingCustomerWithoutSupplierTestData		^ ReadStream on: 'EC,D,5456774'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:41'!existingCustomerRecordStartingWithMoreThanOneECTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'ECE,D,5456774'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:50'!newCustomerRecordThatAlreadyExistsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Geronimo,Gutierrez,D,5456774'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:22'!existingCustomerRecordWithLessThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'EC,D'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:22'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D,22333444,etc'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 17:01'!existingCustomerRecordThatDoesntExistTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'EC,D,545677477'! !!SupplierImportTest methodsFor: 'test data - customers' stamp: 'MarceloGuzman 7/2/2018 16:21'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'MarceloGuzman 7/2/2018 16:06'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'MarceloGuzman 7/2/2018 16:04'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,etc'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'MarceloGuzman 7/2/2018 16:14'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedSupplierRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'MarceloGuzman 7/2/2018 16:03'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MarceloGuzman 6/28/2018 20:11'!assert: supplier isNamed: fullName identfiedAs: idType withNumber: idNumber numberOfAddresses: addressesSize andNumberOfCustomers: customersSize	self assert: supplier fullName equals: fullName.	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.	self assert: supplier numberOfAddresses equals: addressesSize .	self assert: supplier numberOfCustomers equals: customersSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MarceloGuzman 6/28/2018 21:41'!assertImportedSuppliersSizeIsCorrect	self assert: supplierSystem allSuppliers size equals: 1! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MarceloGuzman 7/2/2018 16:29'!assertSupplier1WasImportedCorrectly	| supplier |	supplier := self alwaysImportedSupplier. 		self assert: supplier isNamed: 'Supplier1' identfiedAs: self alwaysImportedSupplierIdType withNumber: self alwaysImportedSupplierIdNumber numberOfAddresses: 2 andNumberOfCustomers: 2.		self assert: (supplier customersIdentifiedAs: 'D' withNumber: '22333444') size equals: 1.	self assert: (supplier customersIdentifiedAs: 'D' withNumber: '5456774') size equals: 1.		self assert: supplier hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MarceloGuzman 6/28/2018 20:13'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := supplier addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 7/2/2018 16:00'!supplierRecordWithMoreThanFourFieldsTestData		^ ReadStream on: 'S,Supplier1,D,123,etc'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 6/28/2018 20:40'!alwaysImportedSupplierRecord	^ 'S,Supplier1,', self alwaysImportedSupplierIdType, ',', self alwaysImportedSupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 7/2/2018 15:59'!supplierRecordWithLessThanFourFieldsTestData		^ ReadStream on: 'S,Supplier1,D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 7/2/2018 16:16'!supplierRecordStartingWithMoreThanOneSTestData		^ ReadStream on:'SS,Supplier1,D,123'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 6/28/2018 19:50'!alwaysImportedSupplierIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - supplier' stamp: 'MarceloGuzman 6/28/2018 19:50'!alwaysImportedSupplierIdNumber	^ '123'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'MarceloGuzman 7/2/2018 14:30'!setUp	supplierSystem := Environment current createSupplierSystem.	supplierSystem start.	supplierSystem beginTransaction.		customerSystem := Environment current createCustomerSystem.	customerSystem start.	customerSystem beginTransaction.		erpSystem := ERPSystem withCustomerSystem: customerSystem andSupplierSystem: supplierSystem.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 14:24'!testImportSuppliers	self importCustomersFrom: self validCustomersTestData.	self importSuppliersFrom: self validTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplier1WasImportedCorrectly.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:36'!testCanNotImportNewCustomerWithoutSupplier	self		should: [ self importSuppliersFrom: self newCustomerWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerWithoutSupplierErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 14:24'!validCustomersTestData	^ReadStream on: 'C,Geronimo,Gutierrez,D,5456774A,Rivadavia,4232,Almagro,1212,BsAs'! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:29'!testCanNotImportExistingCustomerRecordWithMoreThanThreeFields		self		should: [ self importSuppliersFrom: self existingCustomerRecordWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 15:59'!testCanNotImportSupplierRecordWithLessThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithLessThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:15'!testShouldNotImportSupplierRecordsStartingWithMoreThanS	self		should: [ self				importSuppliersFrom: self supplierRecordStartingWithMoreThanOneSTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/28/2018 21:41'!alwaysImportedSupplier	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedSupplierIdType.	anIdentificationNumber := self alwaysImportedSupplierIdNumber.	^ supplierSystem		supplierIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:29'!testCanNotImportNewCustomerRecordWithMoreThanFiveFields		self		should: [ self importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:06'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:07'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 14:23'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: customerSystem) import! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:13'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:25'!testCanNotImportNewCustomerRecordWithLessThanFiveFields		self		should: [ self importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 6/28/2018 21:41'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: supplierSystem) import! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:39'!testCanNotImportExistingCustomerWithoutSupplier	self		should: [ self importSuppliersFrom: self existingCustomerWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerWithoutSupplierErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:04'!testCanNotImportAddressRecordWithMoreThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:02'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:00'!testCanNotImportSupplierRecordWithMoreThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithMoreThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:40'!testShouldNotImportNewCustomersRecordsStartingWithMoreThanNC	self 		should: [ self importSuppliersFrom: self newCustomerRecordStartingWithMoreThanOneNCTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:42'!testShouldNotImportExistingCustomersRecordsStartingWithMoreThanNC	self 		should: [ self importSuppliersFrom: self existingCustomerRecordStartingWithMoreThanOneECTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MarceloGuzman 7/2/2018 16:30'!testCanNotImportExistingCustomerRecordWithLessThanThreeFields		self		should: [ self importSuppliersFrom: self existingCustomerRecordWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !Importer subclass: #SupplierImporter	instanceVariableNames: 'readStream system line record newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'initialization' stamp: 'MarceloGuzman 6/28/2018 20:29'!initializeOn: aReadStream using: aSupplierSystem	readStream := aReadStream.	system := aSupplierSystem! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 6/28/2018 20:50'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 7/2/2018 16:38'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 7/2/2018 16:38'!assertThereIsSupplierForCustomer	newSupplier isNil ifTrue: [ self signalCustomerWithoutSupplierError ].! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 6/28/2018 20:51'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 7/2/2018 16:36'!assertThereIsSupplier	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'MarceloGuzman 7/2/2018 16:37'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutSupplierError ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 6/28/2018 20:33'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 6/28/2018 20:33'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 16:57'!importExistingCustomer	|identificationType identificationNumber|		self assertThereIsSupplierForCustomer.	self assertValidExistingCustomerRecordSize.		identificationType := record second.	identificationNumber := record third.		self assertExistingCustomerAlreadyExistWith: identificationType numbered: identificationNumber.		newSupplier addCustomer: (self associatedCustomerSystem customerIdentifiedAs: identificationType numbered: identificationNumber).! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 16:24'!assertValidNewCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 15:38'!assertCustomerDoesntExist: aNewCustomer		(self associatedCustomerSystem allCustomers anySatisfy: [ :customer | customer identificationType  = aNewCustomer identificationType and: [customer identificationNumber  = aNewCustomer identificationNumber] ]) ifTrue: [ self signalCustomerAlreadyRecorded ]			! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 16:24'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 16:38'!importNewCustomer	|newCustomer|		self assertThereIsSupplierForCustomer.	self assertValidNewCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.		self assertCustomerDoesntExist: newCustomer.		self associatedCustomerSystem add: newCustomer.		newSupplier addCustomer: newCustomer.			! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MarceloGuzman 7/2/2018 16:59'!assertExistingCustomerAlreadyExistWith: identificationType numbered: identificationNumber.	(self associatedCustomerSystem allCustomers anySatisfy: [ :customer | customer identificationType  = identificationType and:[customer identificationNumber  = identificationNumber ] ])	ifFalse: [self error: self signalCustomerDoesntExist ].			! !!SupplierImporter methodsFor: 'importing' stamp: 'MarceloGuzman 6/28/2018 20:30'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'MarceloGuzman 6/28/2018 20:31'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'MarceloGuzman 7/2/2018 14:55'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isAddressRecord ifTrue: [ ^self importAddress ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'MarceloGuzman 6/28/2018 20:31'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'mv 7/2/2018 07:16'!associatedCustomerSystem	^ system erpSystem customerSystem! !!SupplierImporter methodsFor: 'importing - private' stamp: 'MarceloGuzman 6/28/2018 20:30'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'MarceloGuzman 6/28/2018 20:36'!importSupplier	self assertValidSupplierRecordSize.		newSupplier := Supplier new.	newSupplier fullName: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	system add: newSupplier! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'MarceloGuzman 6/28/2018 20:32'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'MarceloGuzman 6/28/2018 20:37'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 7/2/2018 17:00'!signalCustomerDoesntExist	self error: self class customerDoesntExistErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 6/28/2018 20:31'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 7/2/2018 15:33'!signalCustomerAlreadyRecorded		self error: self class customerAlreadyRecordedErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 6/28/2018 20:37'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 7/2/2018 16:38'!signalCustomerWithoutSupplierError	self error: self class customerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 6/28/2018 20:50'!signalAddressWithoutSupplierError	self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 6/28/2018 20:51'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'MarceloGuzman 7/2/2018 15:23'!signalInvalidCustomerRecord		self error: self class invalidCustomerRecordErrorDescription ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'MarceloGuzman 6/28/2018 20:29'!from: aReadStream using: aSupplierSystem	^ self new initializeOn: aReadStream using: aSupplierSystem! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 6/28/2018 20:50'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 7/2/2018 16:36'!customerWithoutSupplierErrorDescription		^'There is no Supplier for the imported customer'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 6/28/2018 20:38'!invalidSupplierRecordErrorDescription		^'Invalid supplier record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 7/2/2018 15:24'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 6/28/2018 20:51'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 7/2/2018 16:08'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 7/2/2018 17:00'!customerDoesntExistErrorDescription		^'Customer doesnt exist'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MarceloGuzman 7/2/2018 15:33'!customerAlreadyRecordedErrorDescription		^'Customer already recorded'! !Object subclass: #System	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!System subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!add: aCustomer	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'MarceloGuzman 6/28/2018 21:20'!setERPSystem: anERPSystem.	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!allCustomers	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:35'!customersIsEmpty	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!beginTransaction	self subclassResponsibility! !!CustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:35'!commit	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self subclassResponsibility! !!CustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self subclassResponsibility! !System subclass: #ERPSystem	instanceVariableNames: 'customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'initialization' stamp: 'MarceloGuzman 7/2/2018 14:29'!initializeWithCustomerSystem: aCustomerSystem andSupplierSystem: aSupplierSystem.	customerSystem := aCustomerSystem.	customerSystem setERPSystem: self.		supplierSystem := aSupplierSystem.	supplierSystem setERPSystem: self.! !!ERPSystem methodsFor: 'system' stamp: 'MarceloGuzman 7/2/2018 14:37'!supplierSystem	^supplierSystem! !!ERPSystem methodsFor: 'system' stamp: 'MarceloGuzman 6/28/2018 21:35'!customerSystem	^customerSystem	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ERPSystem class	instanceVariableNames: ''!!ERPSystem class methodsFor: 'instance creation' stamp: 'MarceloGuzman 7/2/2018 14:28'!withCustomerSystem: aCustomerSystem andSupplierSystem: aSupplierSystem	^self new initializeWithCustomerSystem: aCustomerSystem andSupplierSystem: aSupplierSystem.! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'mv 7/1/2018 04:08'!erpSystem		^erpSystem! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'MarceloGuzman 6/28/2018 21:38'!setERPSystem: anERPSystem.	erpSystem := anERPSystem.! !!PersistentCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:19'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!allCustomers	^ session selectAllOfType: Customer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:33'!add: aCustomer	session persist: aCustomer! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:18'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/3/2016 09:11'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !System subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:53'!allSuppliers	self subclassResponsibility! !!SupplierSystem methodsFor: 'initialization' stamp: 'MarceloGuzman 6/28/2018 21:20'!setERPSystem: anERPSystem.	self subclassResponsibility! !!SupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:53'!add: aSupplier	self subclassResponsibility! !!SupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:53'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		self subclassResponsibility! !!SupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:53'!suppliersIsEmpty	self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'erpSystem session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:41'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:24'!add: aSupplier	session persist: aSupplier! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:22'!initialize		super initialize.	self initializeSession. ! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:36'!suppliersIsEmpty	^ self allSuppliers isEmpty! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:33'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:26'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #fullName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:23'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:33'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:20'!start	session start! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:20'!setERPSystem: anERPSystem.	erpSystem := anERPSystem.! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:22'!erpSystem		^erpSystem! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:20'!shutdown	session shutdown! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'MarceloGuzman 7/2/2018 14:37'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		|suppliers|	suppliers := session			select: [ :aSupplier | 				aSupplier identificationType = anIdentifycationType					and: [ aSupplier identificationNumber = anIdentificationNumber ] ]			ofType: Supplier.	suppliers size = 1			ifFalse: [ self error: 'No o more that one supplier found' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:23'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'mv 7/2/2018 07:27'!allSuppliers	^ session selectAllOfType: Supplier! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientCustomerSystem methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:41'!initialize		customers := OrderedCollection new! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!add: aCustomer	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'MarceloGuzman 6/28/2018 21:37'!setERPSystem: anERPSystem.	erpSystem := anERPSystem.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:39'!allCustomers	^ customers copy! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'HernanWilkinson 11/4/2016 09:40'!customersIsEmpty	^ customers isEmpty ! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'mv 7/1/2018 04:08'!erpSystem		^erpSystem! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientCustomerSystem methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !!TransientCustomerSystem methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers erpSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:42'!suppliersIsEmpty	^ suppliers isEmpty ! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:42'!add: aSupplier	suppliers add: aSupplier! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:43'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:43'!initialize		suppliers := OrderedCollection new! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:43'!shutdown! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:42'!commit! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:24'!start! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 21:22'!setERPSystem: anERPSystem.	erpSystem := anERPSystem.! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'mv 7/1/2018 04:04'!erpSystem		^erpSystem! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:24'!beginTransaction! !!TransientSupplierSystem methodsFor: 'accessing' stamp: 'MarceloGuzman 6/28/2018 20:42'!allSuppliers	^ suppliers copy! !